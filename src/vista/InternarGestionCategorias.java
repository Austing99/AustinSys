package vista;

import conexion.Conexion;
import controlador.Ctrl_Categorias;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Categorias;

/**
 *
 * @author yanni
 */
public class InternarGestionCategorias extends javax.swing.JInternalFrame {

    private int Id_Categorias;

    public InternarGestionCategorias() {
        initComponents();
        this.setSize(new Dimension(600, 400));
        this.setTitle("ADMINISTRAR CATEGORIAS.");
        
        this.cargartablaCategorias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Categorias = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnactualizar_categorias = new javax.swing.JButton();
        btneliminar_categorias = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtdescrpcion_categoria = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("√ÅREA DE CONTROL:CATEGORIAS");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Categorias.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jTable_Categorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_Categorias);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 330, 230));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 350, 250));

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnactualizar_categorias.setBackground(java.awt.Color.cyan);
        btnactualizar_categorias.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        btnactualizar_categorias.setText("ACTUALIZAR");
        btnactualizar_categorias.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btnactualizar_categorias.setBorderPainted(false);
        btnactualizar_categorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizar_categoriasActionPerformed(evt);
            }
        });
        jPanel2.add(btnactualizar_categorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 110, -1));

        btneliminar_categorias.setBackground(java.awt.Color.red);
        btneliminar_categorias.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        btneliminar_categorias.setText("ELIMINAR");
        btneliminar_categorias.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btneliminar_categorias.setBorderPainted(false);
        btneliminar_categorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneliminar_categoriasActionPerformed(evt);
            }
        });
        jPanel2.add(btneliminar_categorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 110, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 130, 80));

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel3.setText("DESCRIPCION:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        txtdescrpcion_categoria.setBackground(new java.awt.Color(255, 255, 153));
        txtdescrpcion_categoria.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel3.add(txtdescrpcion_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 170, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 190, 80));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/black-elegant-wallpaper-preview.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnactualizar_categoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizar_categoriasActionPerformed
        // TODO add your handling code here:
        if (!txtdescrpcion_categoria.getText().isEmpty()) {
            Categorias categorias = new Categorias();
            Ctrl_Categorias controlCategorias = new Ctrl_Categorias();

            categorias.setDescripcion(txtdescrpcion_categoria.getText().trim());
            if (controlCategorias.ActualizarCategorias(categorias, Id_Categorias)) {
                JOptionPane.showMessageDialog(null, "Categoria Actualizada Correctamente.");
                txtdescrpcion_categoria.setText("");
                this.cargartablaCategorias();
            } else {
                JOptionPane.showMessageDialog(null, "Error al Actualizar Categoria.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione Una Categoria.");
        }
    }//GEN-LAST:event_btnactualizar_categoriasActionPerformed

    private void btneliminar_categoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneliminar_categoriasActionPerformed
        // TODO add your handling code here:
         if (!txtdescrpcion_categoria.getText().isEmpty()) {
            Categorias categorias = new Categorias();
            Ctrl_Categorias controlCategorias = new Ctrl_Categorias();

            categorias.setDescripcion(txtdescrpcion_categoria.getText().trim());
            if (!controlCategorias.EliminarCategorias(Id_Categorias)) {
                JOptionPane.showMessageDialog(null, "Categoria Eliminada Correctamente.");
                txtdescrpcion_categoria.setText("");
                this.cargartablaCategorias();
            } else {
                JOptionPane.showMessageDialog(null, "Error al Eliminar Categoria.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione Una Categoria.");
        }
    }//GEN-LAST:event_btneliminar_categoriasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnactualizar_categorias;
    private javax.swing.JButton btneliminar_categorias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_Categorias;
    private javax.swing.JTextField txtdescrpcion_categoria;
    // End of variables declaration//GEN-END:variables

    //metodo para mostrar las categorias registradas.
    private void cargartablaCategorias() {
        Connection con = conexion.Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select Id_Categorias, Descripcion from categorias_dadis";
        Statement st;

        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InternarGestionCategorias.jTable_Categorias = new JTable(model);
            InternarGestionCategorias.jScrollPane1.setViewportView(InternarGestionCategorias.jTable_Categorias);

            model.addColumn("Id");
            model.addColumn("Descripcion");

            while (rs.next()) {
                Object fila[] = new Object[2];

                for (int i = 0; i < 2; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al Momento de Llenar Las Tablas Categorias." + e);
        }

        jTable_Categorias.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_Categorias.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    Id_Categorias = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosCategorias(Id_Categorias);
                }
            }

        });
    }

    private void EnviarDatosCategorias(int Id_Categorias) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "select * from categorias_dadis where Id_Categorias = '" + Id_Categorias + "'");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtdescrpcion_categoria.setText(rs.getString("Descripcion"));
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al Seleccionar Categoria" + e);
        }
    }
}
