package vista;

import conexion.Conexion;
import controlador.Ctrl_RegistrarVentas;
import controlador.VentasPDF;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CabeceraVentas;
import modelo.DetallesVentas;

/**
 *
 * @author yanni
 */
public class InterFactura extends javax.swing.JInternalFrame {

    //modelo de los datos para facturacion....
    private DefaultTableModel modeloDatosFactura;

    //lista para detalles de ventas
    ArrayList<DetallesVentas> ListaProductos = new ArrayList<>();
    private DetallesVentas Productos;
    private int idcliente = 0;

    private int IdProductos = 0;
    private String NombreProductos = "";
    private int CantidadStock = 0;
    private double PrecioUnitario = 0;
    private int IvaProductos = 0;

    private int CantidadVentas = 0;//cantidad de productos al hacer la compra...
    private double Subtotal = 0.00;//cantidad por precio sin contar iva...
    private int Descuento = 0;
    private double Iva = 0.00;
    private double TotalPagar = 0.00;

    /*
    variables para calculos totales en la factura
     */
    private double SubTotalGeneral = 0.00;
    private double DescuentoGeneral = 0.00;
    private double IvaGeneral = 0.00;
    private double TotalPagarGeneral = 0.00;
    /*
    fin de las variables para los calculos
     */

    private int AuxIdDetalles = 1;//Id del detalle venta...

    public InterFactura() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("FACTURACION.");

        //cargar productos-clientes a los combox...
        this.cargarClientesVentas();
        this.cargarProductosVentas();
        this.IniciarTablaNuevaFactura();

        txtEfectivo.setEnabled(false);
        btnCalcular_Vuelto.setEnabled(false);

        txtSubtotal.setText("0.00");
        txtIva_Venta.setText("0.00");
        txtTotal_Pagar_Venta.setText("0.00");
    }

    //Inicializamos la tabla para factura
    private void IniciarTablaNuevaFactura() {
        modeloDatosFactura = new DefaultTableModel();

        //añadir columnas.....
        modeloDatosFactura.addColumn("°N");
        modeloDatosFactura.addColumn("Producto");
        modeloDatosFactura.addColumn("Cantidad");
        modeloDatosFactura.addColumn("P.Unitario");
        modeloDatosFactura.addColumn("SubTotal");
        modeloDatosFactura.addColumn("IVA");
        modeloDatosFactura.addColumn("Total Pagar");
        modeloDatosFactura.addColumn("Accion");
        //agregar datos a la tabla....
        this.jTable_Nueva_Venta.setModel(modeloDatosFactura);
    }

    //metodo para mostrar los datos en la tabla...
    private void ListarTablaProductos() {
        this.modeloDatosFactura.setRowCount(ListaProductos.size());
        for (int i = 0; i < ListaProductos.size(); i++) {
            this.modeloDatosFactura.setValueAt(i + 1, i, 0);
            this.modeloDatosFactura.setValueAt(ListaProductos.get(i).getNombre_Productos(), i, 1);
            this.modeloDatosFactura.setValueAt(ListaProductos.get(i).getCantidad_Ventas(), i, 2);
            this.modeloDatosFactura.setValueAt(ListaProductos.get(i).getPrecio_Unitario(), i, 3);
            this.modeloDatosFactura.setValueAt(ListaProductos.get(i).getSubtotal(), i, 4);  
            this.modeloDatosFactura.setValueAt(ListaProductos.get(i).getIva(), i, 5);
            this.modeloDatosFactura.setValueAt(ListaProductos.get(i).getTotal_Pagar(), i, 6);
            this.modeloDatosFactura.setValueAt("Eliminar", i, 7);//luego poner boton eliminar....         
        }
        //añadimos a la jtabla...
        jTable_Nueva_Venta.setModel(modeloDatosFactura);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Nueva_Venta = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        cmbxSeleccione_Producto_Venta = new javax.swing.JComboBox<>();
        cmbxSeleccione_Cliente_Venta = new javax.swing.JComboBox<>();
        txtBusqueda_Cliente_Venta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCantidad_Nueva_Venta = new javax.swing.JTextField();
        btnBuscar_Cliente_Venta = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        txtIva_Venta = new javax.swing.JTextField();
        txtTotal_Pagar_Venta = new javax.swing.JTextField();
        txtEfectivo = new javax.swing.JTextField();
        txtVuelto_Venta = new javax.swing.JTextField();
        btnCalcular_Vuelto = new javax.swing.JButton();
        btnAgregar_Producto_Venta = new javax.swing.JButton();
        btnGenerar_Venta = new javax.swing.JButton();
        fondola = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Engravers MT", 1, 26)); // NOI18N
        jLabel2.setText("FACTURACIÓN");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 270, -1));

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Nueva_Venta.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jTable_Nueva_Venta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_Nueva_Venta.setEnabled(false);
        jTable_Nueva_Venta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_Nueva_VentaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Nueva_Venta);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 220));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 115, 760, 240));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel3.setText("CLIENTES:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 80, -1, -1));

        cmbxSeleccione_Producto_Venta.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        cmbxSeleccione_Producto_Venta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE PRODUCTO:", "Item 2", "Item 3", "Item 4" }));
        cmbxSeleccione_Producto_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxSeleccione_Producto_VentaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbxSeleccione_Producto_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 38, 260, -1));

        cmbxSeleccione_Cliente_Venta.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        cmbxSeleccione_Cliente_Venta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE CLIENTE:", "Item 2", "Item 3", "Item 4" }));
        cmbxSeleccione_Cliente_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxSeleccione_Cliente_VentaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbxSeleccione_Cliente_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 78, 260, -1));

        txtBusqueda_Cliente_Venta.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        getContentPane().add(txtBusqueda_Cliente_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 78, 277, 27));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel5.setText("CANTIDAD:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel4.setText("PRODUCTOS:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 40, -1, -1));

        txtCantidad_Nueva_Venta.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        getContentPane().add(txtCantidad_Nueva_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, 50, 28));

        btnBuscar_Cliente_Venta.setBackground(new java.awt.Color(102, 51, 0));
        btnBuscar_Cliente_Venta.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        btnBuscar_Cliente_Venta.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar_Cliente_Venta.setText("BUSCAR");
        btnBuscar_Cliente_Venta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBuscar_Cliente_Venta.setBorderPainted(false);
        btnBuscar_Cliente_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscar_Cliente_VentaActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar_Cliente_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 78, 90, 25));

        jPanel2.setBackground(new java.awt.Color(255, 255, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel6.setText("SUBTOTAL:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 4, -1, -1));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel8.setText("IVA:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 37, -1, -1));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel9.setText("TOTAL A PAGAR:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 70, -1, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel10.setText("EFECTIVO:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, -1, -1));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel11.setText("CAMBIO:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, -1, -1));

        txtSubtotal.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtSubtotal.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        txtSubtotal.setEnabled(false);
        txtSubtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSubtotalActionPerformed(evt);
            }
        });
        jPanel2.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 5, 120, 23));

        txtIva_Venta.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtIva_Venta.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        txtIva_Venta.setEnabled(false);
        jPanel2.add(txtIva_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 37, 120, 23));

        txtTotal_Pagar_Venta.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtTotal_Pagar_Venta.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        txtTotal_Pagar_Venta.setEnabled(false);
        jPanel2.add(txtTotal_Pagar_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 120, 23));

        txtEfectivo.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jPanel2.add(txtEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 120, 23));

        txtVuelto_Venta.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtVuelto_Venta.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        txtVuelto_Venta.setEnabled(false);
        jPanel2.add(txtVuelto_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 120, 23));

        btnCalcular_Vuelto.setBackground(java.awt.Color.cyan);
        btnCalcular_Vuelto.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        btnCalcular_Vuelto.setText("CALCULAR CAMBIO");
        btnCalcular_Vuelto.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCalcular_Vuelto.setBorderPainted(false);
        btnCalcular_Vuelto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcular_VueltoActionPerformed(evt);
            }
        });
        jPanel2.add(btnCalcular_Vuelto, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 160, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 378, 490, 190));

        btnAgregar_Producto_Venta.setBackground(new java.awt.Color(0, 0, 0));
        btnAgregar_Producto_Venta.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        btnAgregar_Producto_Venta.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar_Producto_Venta.setText("AÑADIR PRODUCTO");
        btnAgregar_Producto_Venta.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAgregar_Producto_Venta.setBorderPainted(false);
        btnAgregar_Producto_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregar_Producto_VentaActionPerformed(evt);
            }
        });
        getContentPane().add(btnAgregar_Producto_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 35, 150, 30));

        btnGenerar_Venta.setBackground(new java.awt.Color(255, 102, 102));
        btnGenerar_Venta.setFont(new java.awt.Font("Verdana", 3, 17)); // NOI18N
        btnGenerar_Venta.setForeground(java.awt.Color.blue);
        btnGenerar_Venta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/IMPRIMIR.png"))); // NOI18N
        btnGenerar_Venta.setText("REGISTRAR VENTA");
        btnGenerar_Venta.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGenerar_Venta.setBorderPainted(false);
        btnGenerar_Venta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerar_Venta.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnGenerar_Venta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerar_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerar_VentaActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerar_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 190, 125));

        fondola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fondo00000.jpg"))); // NOI18N
        getContentPane().add(fondola, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscar_Cliente_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscar_Cliente_VentaActionPerformed
        // TODO add your handling code here:
        String buscarCliente = txtBusqueda_Cliente_Venta.getText().trim();
        Connection cn = Conexion.conectar();
        String sql = "select Nombres_Clientes, Apellidos_Clientes from clientes_dadis where Cedula_Clientes = '" + buscarCliente + "'";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                cmbxSeleccione_Cliente_Venta.setSelectedItem(rs.getString("Nombres_Clientes") + " " + rs.getString("Apellidos_Clientes"));
            } else {
                cmbxSeleccione_Cliente_Venta.setSelectedItem("SELECCIONE CLIENTE:");
                JOptionPane.showMessageDialog(null, "Numero de Cedula Incorrecto O No Existe.");
            }
            txtBusqueda_Cliente_Venta.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error en la Busqueda de Clientes Registrados" + e);
        }
    }//GEN-LAST:event_btnBuscar_Cliente_VentaActionPerformed

    private void btnAgregar_Producto_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregar_Producto_VentaActionPerformed
        // TODO add your handling code here:
        String Combox = this.cmbxSeleccione_Producto_Venta.getSelectedItem().toString();

        //validacion que seleccione producto...
        if (Combox.equalsIgnoreCase("SELECCIONE UN PRODUCTO:")) {
            JOptionPane.showMessageDialog(null, "Seleccione Un Producto Por Favor.");
        } else {
            //validar el ingreso de una cantidad...
            if (!txtCantidad_Nueva_Venta.getText().isEmpty()) {
                //validacion de que solo ingrese valores numericos...
                boolean Validacion = validar(txtCantidad_Nueva_Venta.getText());
                if (Validacion == true) {
                    //validacion que la cantidad sea mayor a 0..
                    if (Integer.parseInt(txtCantidad_Nueva_Venta.getText()) > 0) {
                        CantidadVentas = Integer.parseInt(txtCantidad_Nueva_Venta.getText());
                        //metodo para obtener datos de los productos para la venta...
                        this.DatosProductos();
                        //validamos que la cantidad de productos ingresados no supere al stock disponible...
                        if (CantidadVentas <= CantidadStock) {
                            Subtotal = PrecioUnitario * CantidadVentas;
                            TotalPagar = Subtotal + Iva + Descuento;
                            //redondear decimales...
                            Subtotal = (double) Math.round(Subtotal * 100) / 100;
                            Iva = (double) Math.round(Iva * 100) / 100;
                            TotalPagar = (double) Math.round(TotalPagar * 100) / 100;
                            //creamos nuevo producto..
                            Productos = new DetallesVentas(AuxIdDetalles, 1, IdProductos, NombreProductos, Integer.parseInt(txtCantidad_Nueva_Venta.getText()), PrecioUnitario, Subtotal, Descuento, Iva, TotalPagar);
                            //añadimos a la lista...
                            ListaProductos.add(Productos);
                            JOptionPane.showMessageDialog(null, "Producto Agregado Correctamente.");
                            AuxIdDetalles++;
                            txtCantidad_Nueva_Venta.setText("");
                            //volvemos a cargar productos...
                            this.cargarProductosVentas();
                            this.calcularTotalPagar();
                            txtEfectivo.setEnabled(true);
                            btnCalcular_Vuelto.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "Stock No Disponible.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La Cantidad Tiene Que Ser Mayor a 0.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese Solo Valores Numericos Por Favor.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese Una Cantidad Para Cada Producto.");
            }
        }
        //llamamos al metodo de listar productos  a la tabla...
        this.ListarTablaProductos();

    }//GEN-LAST:event_btnAgregar_Producto_VentaActionPerformed

    private void btnGenerar_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerar_VentaActionPerformed
        // TODO add your handling code here:

        CabeceraVentas cabeceraVentas = new CabeceraVentas();
        DetallesVentas detallesVentas = new DetallesVentas();
        Ctrl_RegistrarVentas controlRegistrarVentas = new Ctrl_RegistrarVentas();
        
        String FechaActual = " ";
        Date date = new Date();
        FechaActual = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(date);

        if (!cmbxSeleccione_Cliente_Venta.getSelectedItem().equals("SELECCIONE CLIENTE:")) {
            if (ListaProductos.size() > 0) {

                //metodo para obtener id del cliente...
                this.ObtenerIdCliente();
                //Registrar cabecera....
                cabeceraVentas.setId_Cabeceras_Ventas(0);
                cabeceraVentas.setId_Clientes(idcliente);
                cabeceraVentas.setValor_Pagar(Double.parseDouble(txtTotal_Pagar_Venta.getText()));
                cabeceraVentas.setFecha_Ventas(FechaActual);

                if (controlRegistrarVentas.Guardar(cabeceraVentas)) {
                    JOptionPane.showMessageDialog(null, "Venta Registrada Con Exito");

                    //generar la factura...
                    VentasPDF pdf = new VentasPDF();
                    pdf.DatosCLientes(idcliente);
                    pdf.FacturaPDF();

                    //Registrar detalle....
                    for (DetallesVentas elemento : ListaProductos) {
                        detallesVentas.setId_Detalles_Ventas(0);
                        detallesVentas.setId__abeceras_Ventas(0);
                        detallesVentas.setId_Productos(elemento.getId_Productos());
                        detallesVentas.setCantidad_Ventas(elemento.getCantidad_Ventas());
                        detallesVentas.setPrecio_Unitario(elemento.getPrecio_Unitario());
                        detallesVentas.setSubtotal(elemento.getSubtotal());
                        detallesVentas.setDescuento(elemento.getDescuento());
                        detallesVentas.setIva(elemento.getIva());
                        detallesVentas.setTotal_Pagar(elemento.getTotal_Pagar());

                        if (controlRegistrarVentas.Guardar(detallesVentas)) {
                            //System.out.println("Detalle de Venta Registrado Exitosamente.");**************      
                            //limpiar los campos
                            txtSubtotal.setText("0.00");
                            txtIva_Venta.setText("0.00");
                            txtTotal_Pagar_Venta.setText("0.00");
                            txtEfectivo.setText("");
                            txtVuelto_Venta.setText("0.00");
                            AuxIdDetalles = 1;

                            this.cargarClientesVentas();
                            this.RestarStockProductos(elemento.getId_Productos(), elemento.getCantidad_Ventas());

                        } else {
                            JOptionPane.showMessageDialog(null, "!Error Al Guardar Detalle De Venta¡");
                        }
                    }
                    //vaciamos la lista..
                    ListaProductos.clear();
                    ListarTablaProductos();

                } else {
                    JOptionPane.showMessageDialog(null, "!Error Al Guardar Cabecera De Venta¡");
                }

            } else {
                JOptionPane.showMessageDialog(null, "!Seleccione un Producto Por Favor¡");
            }
        } else {
            JOptionPane.showMessageDialog(null, "!Seleccione un Cliente Por Favor¡");
        }
       

    }//GEN-LAST:event_btnGenerar_VentaActionPerformed

    private void btnCalcular_VueltoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcular_VueltoActionPerformed
        // TODO add your handling code here:
        if (!txtEfectivo.getText().isEmpty()) {

            //validamos el ingreso de solo numeros....
            boolean validacion = validarDouble(txtEfectivo.getText());
            if (validacion == true) {

                //validamos que el efectivo sea mayor a 0....
                double efec = Double.parseDouble(txtEfectivo.getText().trim());
                double tope = Double.parseDouble(txtTotal_Pagar_Venta.getText().trim());
                if (efec < tope) {
                    JOptionPane.showMessageDialog(null, "¡El Dinero En Efectivo Ingresado Es Insuficiente.!");
                } else {
                    double vuelto = (efec - tope);
                    double vuel = (double) Math.round(vuelto * 100d) / 100;
                    String vue = String.valueOf(vuel);
                    txtVuelto_Venta.setText(vue);

                }
            } else {
                JOptionPane.showMessageDialog(null, "¡Ingrese Solo Valores Numericos.!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "¡Ingrese El Valor De Efectivo!");
        }
    }//GEN-LAST:event_btnCalcular_VueltoActionPerformed
    int IdarrayList = 0;
    private void jTable_Nueva_VentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_Nueva_VentaMouseClicked
        // TODO add your handling code here:
        int fila_point = jTable_Nueva_Venta.rowAtPoint(evt.getPoint());
        int columna_point = 0;

        if (fila_point > -1) {
            IdarrayList = (int) modeloDatosFactura.getValueAt(fila_point, columna_point);
        }
        int opcion = JOptionPane.showConfirmDialog(null, "¿Esta Seguro de Eliminar El Producto?");

        //opciones de confirmar dialogo (si = 0, no = 1, cancel = 2, close = -1)
        switch (opcion) {
            case 0://si presiona si
                ListaProductos.remove(IdarrayList - 1);
                this.calcularTotalPagar();
                this.ListarTablaProductos();
                break;
            case 1://si presiona no..
                break;
            case 2://si cancela...
                break;
            case -1://si cierra...
                break;
            default:
                break;
        }


    }//GEN-LAST:event_jTable_Nueva_VentaMouseClicked

    private void cmbxSeleccione_Producto_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxSeleccione_Producto_VentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbxSeleccione_Producto_VentaActionPerformed

    private void cmbxSeleccione_Cliente_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxSeleccione_Cliente_VentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbxSeleccione_Cliente_VentaActionPerformed

    private void txtSubtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSubtotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSubtotalActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar_Producto_Venta;
    private javax.swing.JButton btnBuscar_Cliente_Venta;
    private javax.swing.JButton btnCalcular_Vuelto;
    private javax.swing.JButton btnGenerar_Venta;
    private javax.swing.JComboBox<String> cmbxSeleccione_Cliente_Venta;
    private javax.swing.JComboBox<String> cmbxSeleccione_Producto_Venta;
    private javax.swing.JLabel fondola;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_Nueva_Venta;
    private javax.swing.JTextField txtBusqueda_Cliente_Venta;
    private javax.swing.JTextField txtCantidad_Nueva_Venta;
    public static javax.swing.JTextField txtEfectivo;
    public static javax.swing.JTextField txtIva_Venta;
    public static javax.swing.JTextField txtSubtotal;
    public static javax.swing.JTextField txtTotal_Pagar_Venta;
    public static javax.swing.JTextField txtVuelto_Venta;
    // End of variables declaration//GEN-END:variables

    /*
    metodo para cargar clientes al combox seleccionar...
     */
    private void cargarClientesVentas() {
        Connection cn = Conexion.conectar();
        String sql = "select * from clientes_dadis";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cmbxSeleccione_Cliente_Venta.removeAllItems();
            cmbxSeleccione_Cliente_Venta.addItem("SELECCIONE CLIENTE:");
            while (rs.next()) {
                cmbxSeleccione_Cliente_Venta.addItem(rs.getString("Nombres_Clientes") + " " + rs.getString("Apellidos_Clientes"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al Cargar Clientes al Combox Ventas." + e);
        }
    }

    /*
    metodo para cargar productos al combox seleccionar...
     */
    private void cargarProductosVentas() {
        Connection cn = Conexion.conectar();
        String sql = "select * from productos_dadis";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cmbxSeleccione_Producto_Venta.removeAllItems();
            cmbxSeleccione_Producto_Venta.addItem("SELECCIONE PRODUCTO:");
            while (rs.next()) {
                cmbxSeleccione_Producto_Venta.addItem(rs.getString("Nombre_Productos"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al Cargar Productos al Combox Ventas." + e);
        }
    }

    /*
    metodo para validar ingreso de numeros.
     */
    private boolean validar(String Valor) {
        try {
            int Num = Integer.parseInt(Valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*
    metodo para validar ingreso de numeros para el cambio
     */
    private boolean validarDouble(String Valor) {
        try {
            double Num = Double.parseDouble(Valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*
    metodo para cargar productos al combox seleccionar...
     */
    private void DatosProductos() {
        try {
            String sql = "select * from productos_dadis where Nombre_Productos = '" + this.cmbxSeleccione_Producto_Venta.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                IdProductos = rs.getInt("Id_Productos");
                NombreProductos = rs.getString("Nombre_Productos");
                CantidadStock = rs.getInt("Cantidad_Productos");
                PrecioUnitario = rs.getDouble("Precio_Productos");
                IvaProductos = rs.getInt("ImpuestoIva_Productos");
                this.CalcularIvatotal(PrecioUnitario, IvaProductos);//calcula y retoma el todal del iva....

            }
        } catch (SQLException e) {
            System.out.println("Error al Obtener Datos de los Productos" + e);
        }
    }

    /*
    metodo para calcular iva de productos ......
     */
    private double CalcularIvatotal(double PrecioUnitario, int IvaProductos) {
        int P_IVA = IvaProductos;

        switch (P_IVA) {
            case 0:
                Iva = 0;
                break;
            case 12:
                Iva = (PrecioUnitario * CantidadVentas) * 0.12;
                break;
            case 14:
                Iva = (PrecioUnitario * CantidadVentas) * 0.14;
                break;
            default:
                break;
        }
        return Iva;
    }

    private void calcularTotalPagar() {
        SubTotalGeneral = 0;
        DescuentoGeneral = 0;
        IvaGeneral = 0;
        TotalPagarGeneral = 0;

        for (DetallesVentas elemento : ListaProductos) {
            SubTotalGeneral += elemento.getSubtotal();
            DescuentoGeneral += elemento.getDescuento();
            IvaGeneral += elemento.getIva();
            TotalPagarGeneral += elemento.getTotal_Pagar();
        }

        //redondear decimales...
        SubTotalGeneral = (double) Math.round(SubTotalGeneral * 100) / 100;
        DescuentoGeneral = (double) Math.round(DescuentoGeneral * 100) / 100;
        IvaGeneral = (double) Math.round(IvaGeneral * 100) / 100;
        TotalPagarGeneral = (double) Math.round(TotalPagarGeneral * 100) / 100;

        //enviar datos a los campos requeridos...
        txtSubtotal.setText(String.valueOf(SubTotalGeneral));
        txtIva_Venta.setText(String.valueOf(IvaGeneral));
        txtTotal_Pagar_Venta.setText(String.valueOf(TotalPagarGeneral));
    }

    /*
    metodo para obtener el id del cliente....
     */
    private void ObtenerIdCliente() {
        try {
            String sql = "select * from clientes_dadis where concat(Nombres_Clientes, ' ', Apellidos_Clientes) = '" + this.cmbxSeleccione_Cliente_Venta.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idcliente = rs.getInt("Id_Clientes");

            }

        } catch (SQLException e) {
            System.err.println("Error al Obtener Id CLiente." + e);
        }
    }

    /*
   metodo para restar el stock vendido.....
     */
    private void RestarStockProductos(int Id_Productos, int Cantidad_Ventas) {
        int cantidadproductosbd = 0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "select Id_Productos, Cantidad_Productos from productos_dadis where Id_Productos = '" + Id_Productos + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadproductosbd = rs.getInt("Cantidad_Productos");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al Restar Stock Vendido." + e);
        }

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("update productos_dadis set Cantidad_Productos = ? where Id_Productos = '" + Id_Productos + "'");
            int cantidadNueva = cantidadproductosbd - Cantidad_Ventas;
            consulta.setInt(1, cantidadNueva);
            if (consulta.executeUpdate() > 0) {
                System.out.println("Todo Belen.");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al Restar Stock Vendido 2 ." + e);
        }
    }
}
