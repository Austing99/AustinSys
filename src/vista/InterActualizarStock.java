package vista;

import conexion.Conexion;
import controlador.Ctrl_Productos;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import modelo.Productos;

/**
 *
 * @author yanni
 */
public class InterActualizarStock extends javax.swing.JInternalFrame {

    //variables para el stock...
    int Id_Productos = 0;
    int Cantidad_Productos = 0;

    public InterActualizarStock() {
        initComponents();
        this.setTitle("ACTUALIZAR STOCK PRODUCTOS");
        this.setSize(new Dimension(400, 300));
        this.cargarProductosStock();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtStock_Actual = new javax.swing.JTextField();
        txtStock_Nuevo = new javax.swing.JTextField();
        btnActualizar_Stock = new javax.swing.JButton();
        cmbxelegir_Pro = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Calisto MT", 1, 18)); // NOI18N
        jLabel1.setText("ACTUALIZAR STOCK DE PRODUCTOS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 370, 40));

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Productos:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 50, -1, -1));

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 20)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("Stock Actual:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("Stock Añadir:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 167, -1, -1));

        txtStock_Actual.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        txtStock_Actual.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtStock_Actual.setEnabled(false);
        getContentPane().add(txtStock_Actual, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 80, -1));

        txtStock_Nuevo.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        getContentPane().add(txtStock_Nuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 80, -1));

        btnActualizar_Stock.setBackground(java.awt.Color.yellow);
        btnActualizar_Stock.setFont(new java.awt.Font("Algerian", 3, 18)); // NOI18N
        btnActualizar_Stock.setText("ACTUALIZAR");
        btnActualizar_Stock.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnActualizar_Stock.setBorderPainted(false);
        btnActualizar_Stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizar_StockActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar_Stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 160, 40));

        cmbxelegir_Pro.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        cmbxelegir_Pro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE PRODUCTO:" }));
        cmbxelegir_Pro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxelegir_ProActionPerformed(evt);
            }
        });
        getContentPane().add(cmbxelegir_Pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 190, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FONDOAZUL111.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 380, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbxelegir_ProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxelegir_ProActionPerformed
        // TODO add your handling code here:
        this.MostrarStock();
    }//GEN-LAST:event_cmbxelegir_ProActionPerformed

    private void btnActualizar_StockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizar_StockActionPerformed
        // TODO add your handling code here:
        ///validamos seleccion del producto....
        if (!cmbxelegir_Pro.getSelectedItem().equals("SELECCIONE PRODUCTO:")) {
            //validamos campos vacios....
            if (!txtStock_Nuevo.getText().isEmpty()) {
                //validamos que el usuario ingrese solo numeros...
                boolean Validacion = ValidacionNumeros(txtStock_Nuevo.getText().trim());
                if (Validacion == true) {
                    //validar que la cantidad sea mayor a 0
                    if (Integer.parseInt(txtStock_Nuevo.getText()) > 0) {
                        
                        Productos productos = new Productos();
                        Ctrl_Productos controlProductos = new Ctrl_Productos();
                        int stockactual = Integer.parseInt(txtStock_Actual.getText().trim());
                        int stocknuevo = Integer.parseInt(txtStock_Nuevo.getText().trim());
                        
                        stocknuevo = stockactual + stocknuevo;
                        productos.setCantidad_Productos(stocknuevo);
                        if (controlProductos.ActualizarStocksProductos(productos, Id_Productos)) {
                            JOptionPane.showMessageDialog(null, "Stock Actualizado Exitosamente.");
                            cmbxelegir_Pro.setSelectedItem("SELECCIONE PRODUCTO:");
                            txtStock_Actual.setText("");
                            txtStock_Nuevo.setText("");
                            this.cargarProductosStock();
                        } else {
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Tiene que Ingresar una Cantidad Mayor a 0.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Solo Puede Ingresar Valores Numericos.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Añada Nueva Cantidad Al Stock.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione Un Producto.");
        }
    }//GEN-LAST:event_btnActualizar_StockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar_Stock;
    private javax.swing.JComboBox<String> cmbxelegir_Pro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtStock_Actual;
    private javax.swing.JTextField txtStock_Nuevo;
    // End of variables declaration//GEN-END:variables

//metodo para cargar los productos al combox
    private void cargarProductosStock() {

        Connection cn = Conexion.conectar();
        String sql = "select * from productos_dadis";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cmbxelegir_Pro.removeAllItems();
            cmbxelegir_Pro.addItem("SELECCIONE PRODUCTO:");
            while (rs.next()) {
                cmbxelegir_Pro.addItem(rs.getString("Nombre_Productos"));
            }
        } catch (SQLException e) {
            System.out.println("Error al Cargar Productos al Stock." + e);
        }
    }

    //metodo para mostrar el stock de los productos seleccionados...
    private void MostrarStock() {
        try {
            Connection cn = Conexion.conectar();
            String sql = "select * from productos_dadis where Nombre_Productos = '" + this.cmbxelegir_Pro.getSelectedItem() + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                Id_Productos = rs.getInt("Id_Productos");
                Cantidad_Productos = rs.getInt("Cantidad_Productos");
                txtStock_Actual.setText(String.valueOf(Cantidad_Productos));
            } else {
                txtStock_Actual.setText("");
            }
        } catch (SQLException e) {
            System.out.println("Error al Mostrar Stock del Producto Seleccionado." + e);
        }
    }

    //validacion de solo numeros...
    private boolean ValidacionNumeros(String Valor) {
        int Num;
        try {
            Num = Integer.parseInt(Valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}
